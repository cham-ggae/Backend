<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demo.family.dao.FamilyDao">

    <!-- ========================================
         1. 가족 스페이스 생성 관련 쿼리
         ======================================== -->

    <!-- 새로운 가족 스페이스 생성 -->
    <insert id="createFamilySpace" parameterType="com.example.demo.family.dto.FamilySpace" useGeneratedKeys="true" keyProperty="fid">
        INSERT INTO Family_space (name, invite_code, combi_type, nutrial, created_at)
        VALUES (#{name}, #{inviteCode}, #{combiType}, #{nutrial}, NOW())
    </insert>

    <!-- 사용자의 fid 업데이트 (가족에 참여) -->
    <update id="updateUserFamilyId">
        UPDATE Users
        SET fid = #{fid}
        WHERE uid = #{uid}
    </update>

    <!-- ========================================
         2. 가족 스페이스 조회 관련 쿼리
         ======================================== -->

    <!-- 가족 스페이스 기본 정보 조회 -->
    <select id="getFamilySpaceById" parameterType="long" resultType="com.example.demo.family.dto.FamilySpace">
        SELECT fid, name, invite_code as inviteCode, combi_type as combiType, nutrial, created_at as createdAt
        FROM Family_space
        WHERE fid = #{fid}
    </select>

    <!-- 초대 코드로 가족 스페이스 조회 -->
    <select id="getFamilySpaceByInviteCode" parameterType="string" resultType="com.example.demo.family.dto.FamilySpace">
        SELECT fid, name, invite_code as inviteCode, combi_type as combiType, nutrial, created_at as createdAt
        FROM Family_space
        WHERE invite_code = #{inviteCode}
    </select>

    <!-- 가족 구성원 목록 조회 (요금제 정보 포함) -->
    <select id="getFamilyMembers" parameterType="long" resultType="com.example.demo.family.dto.FamilyMember">
        SELECT
        u.uid,
        u.name,
        u.age,
        u.gender,
        u.join_date as joinDate,
        u.profile_image as profileImage,
        p.plan_id as planId,
        p.plan_name as planName,
        p.price,
        p.benefit
        FROM Users u
        LEFT JOIN Plans p ON u.plan_id = p.plan_id
        WHERE u.fid = #{fid}
        ORDER BY u.join_date ASC
    </select>

    <!-- 가족 구성원 수 조회 -->
    <select id="getFamilyMemberCount" parameterType="long" resultType="int">
        SELECT COUNT(*)
        FROM Users
        WHERE fid = #{fid}
    </select>

    <!-- 특정 사용자의 가족 구성원 정보 조회 -->
    <select id="getFamilyMemberByUid" parameterType="long" resultType="com.example.demo.family.dto.FamilyMember">
        SELECT
        u.uid,
        u.name,
        u.age,
        u.gender,
        u.join_date as joinDate,
        u.profile_image as profileImage,
        p.plan_id as planId,
        p.plan_name as planName,
        p.price,
        p.benefit
        FROM Users u
        LEFT JOIN Plans p ON u.plan_id = p.plan_id
        WHERE u.uid = #{uid}
    </select>

    <!-- ========================================
         3. 사용자 상태 확인 관련 쿼리
         ======================================== -->

    <!-- 사용자 존재 여부 확인 -->
    <select id="isUserExists" parameterType="long" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM Users
        WHERE uid = #{uid}
    </select>

    <!-- 사용자가 현재 속한 가족 ID 조회 -->
    <select id="getUserCurrentFamilyId" parameterType="long" resultType="java.lang.Long">
        SELECT fid
        FROM Users
        WHERE uid = #{uid}
    </select>

    <!-- 사용자가 특정 가족의 구성원인지 확인 -->
    <select id="isUserFamilyMember" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM Users
        WHERE uid = #{uid} AND fid = #{fid}
    </select>

    <!-- 가족에서 나가기 (fid를 NULL로 설정) -->
    <update id="removeUserFromFamily">
        UPDATE Users
        SET fid = NULL
        WHERE uid = #{uid} AND fid = #{fid}
    </update>

    <!-- 사용자의 기본 정보 조회 -->
    <select id="getUserBasicInfo" parameterType="long" resultType="map">
        SELECT
        uid,
        name,
        email,
        age,
        gender,
        fid,
        join_date as joinDate,
        profile_image as profileImage
        FROM Users
        WHERE uid = #{uid}
    </select>

    <!-- ========================================
         4. 초대 코드 관련 쿼리
         ======================================== -->

    <!-- 초대 코드 중복 확인 -->
    <select id="isInviteCodeExists" parameterType="string" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM Family_space
        WHERE invite_code = #{inviteCode}
    </select>

    <!-- 새로운 초대 코드 생성 (기존 코드 업데이트) -->
    <update id="updateInviteCode">
        UPDATE Family_space
        SET invite_code = #{newInviteCode}
        WHERE fid = #{fid}
    </update>

    <!-- ========================================
         5. 가족 스페이스 관리 쿼리
         ======================================== -->

    <!-- 가족 스페이스 이름 변경 -->
    <update id="updateFamilyName">
        UPDATE Family_space
        SET name = #{name}
        WHERE fid = #{fid}
    </update>

    <!-- 가족 스페이스 결합 타입 변경 -->
    <update id="updateFamilyCombiType">
        UPDATE Family_space
        SET combi_type = #{combiType}
        WHERE fid = #{fid}
    </update>

    <!-- 가족 스페이스 영양제 수량 업데이트 -->
    <update id="updateFamilyNutrial">
        UPDATE Family_space
        SET nutrial = #{nutrial}
        WHERE fid = #{fid}
    </update>

    <!-- 가족 스페이스 삭제 (구성원이 모두 나간 경우) -->
    <delete id="deleteFamilySpace" parameterType="long">
        DELETE FROM Family_space
        WHERE fid = #{fid}
    </delete>

    <!-- 가족 스페이스 존재 여부 확인 -->
    <select id="isFamilySpaceExists" parameterType="long" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM Family_space
        WHERE fid = #{fid}
    </select>

    <!-- ========================================
         6. 통계 및 기타 정보 조회 쿼리
         ======================================== -->

    <!-- 가족 구성원 기본 통계 조회 -->
    <select id="getFamilyBasicStats" parameterType="long" resultType="map">
        SELECT
        COUNT(*) as totalMembers,
        fs.combi_type as combiType,
        COUNT(CASE WHEN u.age IS NOT NULL AND u.age &lt; 19 THEN 1 END) as youthCount,
        ROUND(AVG(CASE WHEN u.age IS NOT NULL THEN u.age END), 1) as avgAge
        FROM Users u
        JOIN Family_space fs ON u.fid = fs.fid
        WHERE u.fid = #{fid}
        GROUP BY fs.combi_type
    </select>

    <!-- 가족별 요금제 사용 현황 조회 -->
    <select id="getFamilyPlanStats" parameterType="long" resultType="map">
        SELECT
        COALESCE(p.plan_name, '요금제 없음') as planName,
        COUNT(*) as userCount,
        COALESCE(p.price, 0) as price
        FROM Users u
        LEFT JOIN Plans p ON u.plan_id = p.plan_id
        WHERE u.fid = #{fid}
        GROUP BY p.plan_name, p.price
        ORDER BY userCount DESC
    </select>

    <!-- 전체 가족 스페이스 개수 조회 -->
    <select id="getTotalFamilySpaceCount" resultType="int">
        SELECT COUNT(*)
        FROM Family_space
    </select>

    <!-- 최근 생성된 가족 스페이스 목록 조회 -->
    <select id="getRecentFamilySpaces" parameterType="int" resultType="com.example.demo.family.dto.FamilySpace">
        SELECT fid, name, invite_code as inviteCode, combi_type as combiType, nutrial, created_at as createdAt
        FROM Family_space
        ORDER BY created_at DESC
        LIMIT #{limit}
    </select>

    <!-- ========================================
         7. 배치 처리용 쿼리
         ======================================== -->

    <!-- 구성원이 없는 빈 가족 스페이스 조회 -->
    <select id="getEmptyFamilySpaces" resultType="java.lang.Long">
        SELECT fs.fid
        FROM Family_space fs
        LEFT JOIN Users u ON fs.fid = u.fid
        WHERE u.fid IS NULL
    </select>

    <!-- 구성원이 없는 빈 가족 스페이스 일괄 삭제 -->
    <delete id="deleteEmptyFamilySpaces">
        DELETE FROM Family_space
        WHERE fid IN (
        SELECT fs.fid
        FROM Family_space fs
        LEFT JOIN Users u ON fs.fid = u.fid
        WHERE u.fid IS NULL
        )
    </delete>

</mapper>